<p>
Объект в ObjectScript - это ассоциативный контейнер с набором элементов. Доступ к элементу объекта осуществляется по ключу
любого типа. Объекты в ObjectScript оптимизированы в нескольких направлениях, поэтому вы можете 
использовать их как собственно массив, список (вектор), хэш-таблицу (являющуюся реализацией карты), словарь, 
коллекцию, стэк, очередь и, возможно, что-то еще. 

<p>
<div class="bs-callout bs-callout-danger">
Элементами объекта могут быть значения любых типов, в том числе др. объекты и массивы. Так можно создавать 
деревья и многомерные объекты.
</div>
</p>

<h3>Синтаксис</h3>

<p>
Объект создается с помощью конструкции в фигурных скобках и перечисления через запятую пар: <nobr>ключ = значений</nobr>. 
При этом запятая после последнего элемента объекта может присутствовать. Если ключ является переменной или рассчитывается 
на этапе выполнения, то его нужно взять в квадратные скобки. В качестве символа ассоциации ключа и значение может 
выступать <code>=</code> (равно) или <code>:</code> (двоеточие). Возможно указать ключ только для некоторых элементов 
и пропустить для других. В этом случае значение ассоциируется по автоинкрементному числовому индексу.

<p>
Если несколько элементов в объявлении объекта используют одинаковый ключ, то останется последнее значение элемента, 
а все другие будут перезаписаны.

<p>
Новый пустой объект можно создать конструкцией <code>{}</code>.

<p>
Элементы объекта также называют свойствами.

<%@controller.widget{'SourceWidget', source="examples/tutorial.objects.osh"}%>

<h3>Пример объекта с индексом, начинающимся с 1</h3>

<%@controller.widget{'SourceWidget', source="examples/tutorial.objects.1.osh"}%>

<h3>Доступ к свойствам</h3>

<p>
Обратится к свойству объекта можно двумя способами: 
<ol>
<li><p>через квадратные скобки <code>obj[key]</code>, в этом случае в квадратных скобках нужно указать переменную
или выражение, результат кот. будет использоваться в качестве ключа
<li><p>через точку <code>obj.key</code> - это эквивалентно <code>obj["key"]</code>
</ol>

<%@controller.widget{'SourceWidget', source="examples/tutorial.objects.key.osh"}%>

<p>
<div class="bs-callout bs-callout-danger">
Попытка доступа к несуществующему свойству, приведет к вызову метода геттера (getter) запрошенного свойста.
Если геттер не реализован, то вернется <code>null</code>. Подробнее о геттерах и сеттерах читайте в разделе
<a href="<%=@controller.createUrl{params={page="langref.oop.properties"}, amp="&amp;"}%>">Свойства</a>.
</div>
</p>

<h3>Разыменование объекта</h3>

<p>
В ObjectScript возможно прямое разыменование объекта (как и массива), возвращаемого в качестве результата вызова функции. 
Это означает, что не обязательно сохранять результат во временную переменную, чтобы получить доступ к свойствам
возвращаемого объекта.

<%@controller.widget{'SourceWidget', source="examples/tutorial.objects.dereferencing.osh"}%>

<h3>Удаление свойств объекта</h3>

<p>
Удаление свойств объекта осуществляется оператором <code>delete</code>, но в отличии от массива, переиндексации
свойств не происходит. Это означает, что все существующие свойства остаются с прежними ключами.

<%@controller.widget{'SourceWidget', source="examples/tutorial.objects.delete.osh"}%>

<h3>Итерация по свойствам объекта</h3>

<p>
Чтобы обойти все свойства объекта в ObjectScript существует специальная конструкция <code>for in</code>.

<%@controller.widget{'SourceWidget', source="examples/tutorial.objects.iter.osh"}%>

<div class="alert alert-info">
См. 
<a href="<%=@controller.createUrl{params={page="langref.oop.properties"}, amp="&amp;"}%>">Свойства</a>,
<a href="<%=@controller.createUrl{params={page="langref.control-structures.for"}, amp="&amp;"}%>">for / for in</a>
</div>
