<p>
Создайте файл с именем <code>index.osh</code> в корневом каталоге веб-сервера (DOCUMENT_ROOT) и запишите в него следующее
содержимое:

<h3>Файл index.osh</h3>

<%@controller.widget{'SourceWidget', source="examples/tutorial.firstpage.osh", lang="html"}%>

<p>Откройте данный файл в браузере, набрав имя вашего веб-сервера и <code>/index.osh</code>. При локальной разработке эта ссылка может быть 
чем-то вроде <code>http://localhost/index.osh</code> или <code>http://127.0.0.1/index.osh</code> (это зависит от настроек вашего веб-сервера).
Если все правильно, то этот файл будет обработан ObjectScript и браузер выведет:

<div class="row">
  <div class="col-md-10">
<pre>
Привет мир!

Я программирую на OS, 5 в степени 2 = 25
</pre>
  </div>
</div>

<p>
Вы можете проверить пример в работе прямо сейчас в онлайне. Для этого кликните на значок с глазом рядом
с исходным кодом, приведенным выше.

<p>
При этом исходник страницы будет выглядеть так (обычно в браузере это можно увидеть,
выбрав из контекстного меню страницы пункт <i>Просмотреть код</i>):

<div class="row">
  <div class="col-md-10">
<pre class="prettyprint"><% @controller.beginWidget("HtmlEncodeWidget") %>
<!DOCTYPE html>
<html>
 <head>
  <title>Тестируем ObjectScript</title>
 </head>
 <body>
 <p>Привет мир!</p> 
 Я программирую на OS, 5 в степени 2 = 25
 </body>
</html><% @controller.endWidget("HtmlEncodeWidget") %>
</pre>
  </div>
</div>

<p>Эта программа чрезвычайно проста. Все, что она делает, это выводит <code>Привет мир!</code>, используя функцию 
ObjectScript <a href="<%=@controller.createUrl{params={page="langref.basic-syntax.output.echo"}, amp="&amp;"}%>">echo</a>, 
а также выводит рассчитанное на этапе выполнения значение <code>5**2</code>. 
Заметьте, что файл не обязан быть выполняемым или как-то отличаться от других файлов. Сервер знает, что этот файл должен быть обработан OS, 
так как файл имеет расширение <code>.osh</code>. Рассматривайте его как обычный HTML-файл, в который можно встраивать программы на ObjectScript и делать кучу интересных вещей.</p>

<p>
<div class="bs-callout bs-callout-danger">
  Если у вас этот пример ничего не отображает или выводит окно загрузки, или если вы видите весь этот файл в текстовом виде, то, 
  скорее всего, ваш веб-сервер не имеет поддержки ObjectScript или был сконфигурирован неправильно. 
  Следуйте инструкции по <a href="<%=@controller.createUrl{action="install", amp="&amp;"}%>">Установке OS</a>, 
  чтобы подготовить ваш веб-сервер для работы с OS.
</div>
</p>

<p>
Цель этого примера - показать формат специальных тегов OS. В этом примере мы использовали <code>&lt;%</code> в качестве 
открывающего тега, затем шли команды OS, завершающиеся закрывающим тегом <code>%&gt;</code>. Таким образом можно где угодно 
<i>входить</i> и <i>выходить</i> из режима ObjectScript в HTML файле. 
<p>
Кроме этого мы использовали тег <code>&lt;%=</code> для вывода значения, рассчитанного на OS. Этот тег также,
как и предыдущий, закрыли тегом <code>%&gt;</code>.
<p>
Подробнее об этом можно прочесть в разделе руководства 
<a href="">Основной синтаксис</a>.

<p>
<div class="bs-callout bs-callout-danger">
<h4>Замечание о переводах строк</h4>
Переводы строк немногое означают в HTML, однако считается хорошей идеей поддерживать HTML в удобочитаемом виде, 
перенося его на новую строку, делая отступы во вложенных тегах и т.п.. 
При вставке ObjectScript с помощью тегов <code>&lt;%</code> и <code>%&gt;</code>, никакого дополнительного форматирования не происходит. 
Если после закрывающего тега <code>%&gt;</code> не следует никаких HTML тегов, то тег <code>%&gt;</code> можно вообще не ставить.
</div>
</p>

<p>
<div class="bs-callout bs-callout-danger">
<h4>Замечание о текстовых процессорах</h4>
Текстовые процессоры (OpenOffice, Microsoft Word, Abiword и др.) в большинстве случаев не подходят для редактирования 
файлов OS. Если вы все же хотите использовать какой-либо из них для тестового скрипта, убедитесь, что сохраняете файл 
как простой текст (plain text), иначе ObjectScript будет не в состоянии прочесть и запустить ваш скрипт.
</div>
</p>

<p>
<div class="bs-callout bs-callout-danger">
<h4>Замечание о Блокноте Windows</h4>
При написании скриптов ObjectScript с использованием встроенного Блокнота Windows необходимо сохранять файлы с расширением <code>.osh</code>
или <code>.os</code>.
Для этого во время сохранения введите имя файла в двойных кавычках, например, <code>"hello.osh"</code>. 
Кроме этого, можно кликнуть на выпадающее меню <i>Текстовые документы</i> в диалоговом окне сохранения файла 
и выбрать в нем пункт <i>Все файлы</i>. 
После этого можно вводить имя файла без кавычек. Если вы не предпримете выше описанных действий, <i>Блокнот</i> автоматически добавит 
к имени файла расширение <code>.txt</code>.
</div>
</p>

<div class="alert alert-info">
См. 
<a href="<%=@controller.createUrl{params={page="langref.basic-syntax.output.echo"}, amp="&amp;"}%>">Функция echo</a>
</div>
