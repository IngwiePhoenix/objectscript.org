<p>
Строка - это набор символов, где символ - это то же самое, что и байт. Это значит, что ObjectScript поддерживает ровно 256 различных символов, 
а также то, что в ObjectScript нет встроенной поддержки Unicode. Однако ObjectScript имеет полную поддержку кодировки UTF-8, 
читайте об этом более подробно в разделе <a href="<%=@controller.createUrl{params={page="intro.utf8support"}, amp="&amp;"}%>">Поддержка UTF-8 в OS</a>.

<p>
<div class="bs-callout bs-callout-danger">
Строки могут быть размером более 2 Гб.
</div>
</p>

<p>
Строки в ObjectScript не изменяемы и всегда хранятся в памяти в одном экземпляре. Как это можно понимать? Это означает, что если в двух
переменных хранятся строковые значения с одной и той же последовательностью байт, то реально переменные будут ссылаться на одно и то же
значение. Это же касается строк, полученных на этапе выполнения. Такая компановка позволяет ObjectScript очень эффективно
использовать память под строковые значения.

<h3>Синтаксис</h3>

<p>
В ObjectScript строка может быть определена четырьмя различными способами:

<ul>
<li><p><a href="#single">одинарными кавычками</a>
<li><p><a href="#double">двойными кавычками</a>
<li><p><a href="#raw-heredoc">простым heredoc-синтаксисом</a>
<li><p><a href="#heredoc">heredoc-синтаксисом</a>
</ul>

<h3 class="anchor-mark"><a name="single"></a>Одинарные кавычки</h3>

<p>
Простейший способ определить строку - это заключить ее в одинарные кавычки (символ <code>'</code>).
<p>
Чтобы использовать одинарную кавычку внутри строки, проэкранируйте ее обратной косой чертой (<code>\</code>). 
Если необходимо написать саму обратную косую черту, продублируйте ее (<code>\\</code>). Все остальные случаи применения 
обратной косой черты будут интерпретированы как обычные символы: это означает, что если вы попытаетесь использовать другие 
управляющие последовательности, такие как <code>\n</code> и др., они будут выведены как есть вместо какого-либо особого поведения.

<%@controller.widget{'SourceWidget', source="examples/tutorial.string.single.osh"}%>

<p>
<div class="bs-callout bs-callout-danger">
Строка в одинарных ковычках должна находится на одной строке кода. Если нужна многострочная строка, то воспользуйтесь 
<a href="#raw-heredoc">простым heredoc-синтаксисом</a>.
</div>
</p>

<h3 class="anchor-mark"><a name="double"></a>Двойные кавычки</h3>

<p>
Если строка заключена в двойные кавычки (<code>"</code>), то ObjectScript распознает большее количество управляющих последовательностей 
для специальных символов.

<table class="table table-striped">
  <thead>
	<tr>
	  <th>Последовательность</th>
	  <th>Значение</th>
	</tr>
  </thead>
  <tbody>
	<tr>
	  <td>\n</td>
	  <td>новая строка (LF или 0x0A (10) в ASCII)</td>
	</tr>
	<tr>
	  <td>\r</td>
	  <td>возврат каретки (CR или 0x0D (13) в ASCII)</td>
	</tr>
	<tr>
	  <td>\t</td>
	  <td>горизонтальная табуляция (HT или 0x09 (9) в ASCII)</td>
	</tr>
	<tr>
	  <td>\b</td>
	  <td>возврат на одну позицию (0x08 (8) в ASCII)</td>
	</tr>
	<tr>
	  <td>\f</td>
	  <td>подача страницы (FF или 0x0C (12) в ASCII)</td>
	</tr>
	<tr>
	  <td>\v</td>
	  <td>вертикальная табуляция (VT или 0x0B (11) в ASCII)</td>
	</tr>
	<tr>
	  <td>\$</td>
	  <td>знак доллара ($)</td>
	</tr>
	<tr>
	  <td>\"</td>
	  <td>двойная кавычка (")</td>
	</tr>
	<tr>
	  <td>\\</td>
	  <td>обратный слеш (\)</td>
	</tr>
	<tr>
	  <td>\x[0-9A-Fa-f]{1,2}</td>
	  <td>последовательность символов, соответствующая регулярному выражению символа в шестнадцатеричной системе счисления</td>
	</tr>
	<tr>
	  <td>\0[0-7]{1,3}</td>
	  <td>последовательность символов, соответствующая регулярному выражению символа в восьмеричной системе счисления</td>
	</tr>
	<tr>
	  <td>\[1-9]\d{0,2}</td>
	  <td>последовательность символов, соответствующая регулярному выражению символа в десятичной системе счисления</td>
	</tr>
  </tbody>
</table>

<p>
Как и в строке, заключенной в одинарные кавычки, экранирование любого символа выведет также и саму обратную косую черту. 
<p>
Самым важным свойством строк в двойных кавычках является <a href="#var-injection">обработка переменных внутри строк</a>.

<p>
<div class="bs-callout bs-callout-danger">
Строка в двойных ковычках должна находится на одной строке. Если нужна многострочная строка, то воспользуйтесь 
<a href="#heredoc">heredoc-синтаксисом</a>.
</div>
</p>

<h3 class="anchor-mark"><a name="raw-heredoc"></a>Простой heredoc-синтаксис</h3>

<p>
Простой heredoc-синтаксис похож на строку с одинарными кавычками, но позволяет вводить многострочные строки с 
пользовательским маркером окончания строки. 
<p>
Начинается такая строка с последовательности <code>&lt;&lt;&lt;MARKER'</code> (подробно это выглядит так: 
&lt;&lt;&lt; + MARKER + ' - это одинарная кавычка) и заканчивается <code>MARKER</code>, где <i>MARKER</i> - это 
любая пользовательская последовательность символов. Что это значит? Т.е. программист сам придумывает <i>MARKER</i>, 
в зависимости от того, какой удобнее использовать в данный момент.
<p>
Такой синтаксис идеально подходит для вставки кусков текста, исходников и т.п..
Он похож на конструкцию <nobr><code>&lt;![CDATA[ ... ]]&gt;</code></nobr>, используемую в 
<a href="http://ru.wikipedia.org/wiki/SGML" target="_blank" rel="nofollow">SGML</a>.
<p>
При использовании простого heredoc-синтаксиса, он не учитывает первые пробельные символы и перевод строки.
Кроме этого не учитывается последний перевод строки перед маркером, если он начинается со старта строки.

<%@controller.widget{'SourceWidget', source="examples/tutorial.string.rawheredoc.osh"}%>

<h3 class="anchor-mark"><a name="heredoc"></a>Heredoc-синтаксис</h3>

<p>
Это последний четверный способ записи строк в OS. Heredoc-синтаксис работает идентично простому heredoc, но в дополнении
позволяет выполнять <a href="#var-injection">Обработку переменных внутри строк</a> аналогично тому, как это делается в строках
с двойными кавычками. Heredoc-синтаксис выводит текст как есть без обработки ескейп последовательностей за исключением
<code>\$</code>.
<p>
Heredoc-синтаксис начинается с последовательности <code>&lt;&lt;&lt;MARKER"</code> и заканчивается <code>MARKER</code>, 
где <i>MARKER</i> - это пользовательская последовательность символов. Т.е. в синтаксисе главное отличие от простого heredoc - 
это двойная кавычка вместо одинарной.
<p>
Такой синтаксис подходит для вставки в код стороних текстов и исходников, когда необходимо вставить в саму строку какую-то переменную.

<h3 class="anchor-mark"><a name="var-injection"></a>Обработка переменных внутри строк</h3>

<p>
Если строка указывается в двойных кавычках, либо при помощи <i>heredoc</i>, то можно вставлять переменные непосредственно
внутрь строки.
<p>
Вставка переменной начинается символами <code>${</code> и заканчивается <code>}</code>.
Если в строку необходимо вставить сами символы <b>${</b>, то перед ними нужно поставить 
обратный слеш, вот так: <code>\${</code>.

<%@controller.widget{'SourceWidget', source="examples/tutorial.string.injection.osh"}%>

<p>
<div class="bs-callout bs-callout-danger">
Обратите внимание, что в примере происходит вставка не только переменых, а и результата выполнения функции <code>factorial</code>.
</div>
</p>

<h3 class="anchor-mark"><a name="convert"></a>Преобразование в строку</h3>

<p>
Простые типы автоматически преобразуются в строки, например, при конкатенации по следующим правилам.

<p>
<table class="table table-striped">
  <thead>
	<tr>
	  <th>Значение</th>
	  <th>Результат</th>
	  <th>Комментарий</th>
	</tr>
  </thead>
  <tbody>
	<tr>
	  <td><code>null</code></td>
	  <td><span class="str">"null"</span></td>
	  <td></td>
	</tr>
	<tr>
	  <td><code>true</code></td>
	  <td><span class="str">"true"</span></td>
	  <td></td>
	</tr>
	<tr>
	  <td><code>false</code></td>
	  <td><span class="str">"false"</span></td>
	  <td></td>
	</tr>
	<tr>
	  <td><code>0.3</code></td>
	  <td><span class="str">"0.3"</span></td>
	  <td>числа преобразуются в строки по дружелюбному для человека формату - %n 
		(см. <a href="<%=@controller.createUrl{params={page="langref.basic-syntax.output.printf"}, amp="&amp;"}%>">printf</a>)</td>
	</tr>
  </tbody>
</table>

<p>
В ObjectScript преобразование в строку выполняется функцией <code>toString</code> (в том числе при конкатенации). <i>toString</i> 
преобразует простые типы по выше описанным правилам, а для сложных - вызывает метод <code>valueOf</code> их прототипа, который должен 
вернуть один из простых типов. Если преобразование в строку невозможно, то <i>toString</i> возвращает 
<span class="str">"null"</span>.

<p>
Аналогично <i>numberOf</i> для чисел, в ObjectScript имеется механизм проверки совместимости значения со строкой. Это делается
функцией <code>stringOf</code>. Она умеет преобразовывать число в строку, а для остальных не строковых типов 
возвращает <code>null</code>.

<h3>Пример <code>stringOf</code> в setCookie</h3>
<div class="row">
  <div class="col-md-11 badge-src">
	<%@controller.widget{'BadgeSourceWidget', source="https://github.com/unitpoint/objectscript.org/blob/master/framework/components/webcore.os#L81"}%>
<pre class="prettyprint linenums lang-js">
  if(expires is DateTime){
    buf.append("; expires="..expires.format("D, d-M-Y H:i:s T"))
  }else if(expires){
    buf.append("; expires="..(stringOf(expires) 
	  || throw "setCookie: expires should be DateTime, string or null"))
  }
</pre>
  </div>
</div>

<p>
<div class="bs-callout bs-callout-danger">
Функция <code>setCookie</code> содержит один из параметров <code>expires</code>, который характеризует время 
жизни куки. Корректное значение этого параметра может быть одного из следующих типов:
<code>string</code>, <code>DateTime</code> или <code>null</code>. В остальных случаях это не имеет 
логического смысла и вызывается исключение оператором <code>throw</code>.
</div>
</p>

<h3>Пример работы <code>stringOf</code> и <code>toString</code></h3>

<%@controller.widget{'SourceWidget', source="examples/tutorial.string.convert.osh"}%>

<p>
<% require("_table.stringOf.osh") %>

<div class="alert alert-info">
См. 
<a href="<%=@controller.createUrl{params={page="langref.exceptions"}, amp="&amp;"}%>">Исключения</a>
</div>
