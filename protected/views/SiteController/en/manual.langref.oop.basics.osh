<p>
В ObjectScript объектно-ориентированное программирование строится на объектах. Объекты – это контейнеры 
пар имя/значение, которые называют свойстами. 
Мы можем получать и устанавливать свойства объекта, используя либо оператор <code>.</code> (точка), 
либо оператор <code>[]</code>. Следующие три фрагмента кода делают одно и то же.

<%@controller.widget{'SourceWidget', source="examples/tutorial.oop.basics.1.osh"}%>

<p>
Эти примеры показывают, насколько более гибки объекты в ObjectScript по сравнению, например, с объектами в C++. 
Свойство <code>lastLoginTime</code> не обязательно предварительно объявлять – если у <code>obj</code> нет свойства с таким именем, 
то оно просто будет добавлено в него.

<p>
В ObjectScript все стандартные типы данных построены на ООП, даже функции - являются объектами, причем объектами 
первого класса (могут быть присвоены переменным,
возвращены функциями и передаваться в параметрах), даже числа являются объектами и в них можно добавлять свои методы! Но обо всем
по порядку.

<p>
При создании любого значения, ObjectScript создает экземпляр объекта и привязывает его к нужному типу через его свойство <code>prototype</code>.
Например, массив имеет протопит <code>Array</code>, который в свою очередь имеет прототип <code>Object</code>. <code>Array</code> -
это объект на ряду с другими, которые создаются фигурными скобками, но когда такой объект используется прототипом для значений, 
то его называют типом или классом значения.

<%@controller.widget{'SourceWidget', source="examples/tutorial.oop.basics.array.osh"}%>

<p>
Когда ObjectScript ищет свойство, он делает это сначало в экземпляре объекта, если не находит, ищет в его прототипе, затем в прототипе 
прототипа и т.д.
